name: Fraud Detection CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: synapse-ai/fraud-detection

jobs:
  # Run tests
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11]
        service: [api-service, data-pipeline, ml-models]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.service }}-${{ hashFiles(format('{0}/requirements.txt', matrix.service)) }}
    
    - name: Install dependencies
      run: |
        cd ${{ matrix.service }}
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov black isort mypy
    
    - name: Run black
      run: |
        cd ${{ matrix.service }}
        black --check .
    
    - name: Run isort
      run: |
        cd ${{ matrix.service }}
        isort --check-only .
    
    - name: Run mypy
      run: |
        cd ${{ matrix.service }}
        mypy . || true  # Allow mypy failures for now
    
    - name: Run tests
      run: |
        cd ${{ matrix.service }}
        pytest --cov=. --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./${{ matrix.service }}/coverage.xml
        flags: ${{ matrix.service }}

  # Test dashboard
  test-dashboard:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: dashboard/package-lock.json
    
    - name: Install dependencies
      run: |
        cd dashboard
        npm ci
    
    - name: Run linter
      run: |
        cd dashboard
        npm run lint
    
    - name: Run type check
      run: |
        cd dashboard
        npm run type-check
    
    - name: Run tests
      run: |
        cd dashboard
        npm run test

  # Build and push Docker images
  build:
    needs: [test, test-dashboard]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    strategy:
      matrix:
        service: [api-service, dashboard, data-pipeline, ml-models]
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Log in to Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        context: ./${{ matrix.service }}
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Security scanning
  security:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    strategy:
      matrix:
        service: [api-service, dashboard, data-pipeline, ml-models]
    
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Deploy to staging
  deploy-staging:
    needs: [build, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
    
    - name: Set up Kustomize
      run: |
        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
        sudo mv kustomize /usr/local/bin/
    
    - name: Deploy to staging
      run: |
        # Update image tags in kustomization
        cd infrastructure/k8s/overlays/staging
        kustomize edit set image fraud-api=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-api-service:${{ github.sha }}
        kustomize edit set image fraud-dashboard=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-dashboard:${{ github.sha }}
        
        # Apply to cluster
        kustomize build . | kubectl apply -f -
        
        # Wait for rollout
        kubectl rollout status deployment/fraud-api-deployment -n fraud-detection-staging
        kubectl rollout status deployment/fraud-dashboard-deployment -n fraud-detection-staging

  # Deploy to production (manual approval)
  deploy-production:
    needs: deploy-staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
    
    - name: Set up Kustomize
      run: |
        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
        sudo mv kustomize /usr/local/bin/
    
    - name: Deploy to production
      run: |
        # Update image tags in kustomization
        cd infrastructure/k8s/overlays/production
        kustomize edit set image fraud-api=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-api-service:${{ github.sha }}
        kustomize edit set image fraud-dashboard=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-dashboard:${{ github.sha }}
        
        # Apply to cluster with rolling update
        kustomize build . | kubectl apply -f -
        
        # Wait for rollout
        kubectl rollout status deployment/fraud-api-deployment -n fraud-detection
        kubectl rollout status deployment/fraud-dashboard-deployment -n fraud-detection
        
        # Run smoke tests
        kubectl run smoke-test --image=curlimages/curl --rm -i --restart=Never -- \
          curl -f http://fraud-api-service/health
